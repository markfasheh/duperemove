.TH "duperemove" "8" "October 2015" "Version 0.10"
.SH "NAME"
duperemove \- Find duplicate extents and print them to stdout
.SH "SYNOPSIS"
\fBduperemove\fR \fI[options]\fR \fIfiles...\fI
.SH "DESCRIPTION"
.PP
\fBduperemove\fR is a simple tool for finding duplicated extents and
submitting them for deduplication. When given a list of files it will
hash their contents on a block by block basis and compare those hashes
to each other, finding and categorizing extents that match each
other. When given the \fB-d\fR option, \fBduperemove\fR will submit those
extents for deduplication using the btrfs-extent-same ioctl.

.SH "GENERAL"
Duperemove has two major modes of operation one of which is a subset
of the other.

.SS "Readonly / Non-deduplicating Mode"

When run without \fB-d\fR (the default) duperemove will print out one or
more tables of matching extents it has determined would be ideal
candidates for deduplication. As a result, readonly mode is useful for
seeing what duperemove might do when run with \fB-d\fR. The output could
also be used by some other software to submit the extents for
deduplication at a later time.

It is important to note that this mode will not print out \fBall\fR
instances of matching extents, just those it would consider for
deduplication.

Generally, duperemove does not concern itself with the underlying
representation of the extents it processes. Some of them could be
compressed, undergoing I/O, or even have already been deduplicated. In
dedupe mode, the kernel handles those details and therefore we try not
to replicate that work.

.SS "Deduping Mode"

This functions similarly to readonly mode with the exception that the
duplicated extents found in our "read, hash, and compare" step will
actually be submitted for deduplication. An estimate of the total data
deduplicated will be printed after the operation is complete. This
estimate is calculated by comparing the total amount of shared bytes
in each file before and after the dedupe.

.SH "OPTIONS"
\fIfiles\fR can refer to a list of regular files and directories or be
a hyphen (-) to read them from standard input.
If a directory is specified, all regular files within it will also be
scanned.

.TP
\fB\-r\fR
Enable recursive dir traversal.

.TP
\fB\-d\fR
De-dupe the results - only works on \fIbtrfs\fR.

.TP
\fB\-A\fR
Opens files readonly when deduping. Primarily for use by privileged
users on readonly snapshots.

.TP
\fB\-h\fR
Print numbers in human-readable format.

.TP
\fB\--hashfile=hashfile\fR
Use a file for temporary storage of hashes instead of memory. This
option drastically reduces the memory footprint of duperemove and is
recommended when your data set is more than a few files large. If the
hashfile exists, it will be overwritten. The hashfile can be deleted
when duperemove is complete.

A future enhancement will allow duperemove to reuse the data inside
hashfiles to optimize the file scan by skipping unchanged files.

.TP
\fB\--fdupes\fR
Run in \fBfdupes\fR mode. With this option you can pipe the output of
\fBfdupes\fR to duperemove to dedupe any duplicate files found. When
recieving a file list in this manner, duperemove will skip the hashing phase.

.TP
\fB\-x\fR
Don't cross filesystem boundaries.

.TP
\fB\-b size\fR
Use the specified block size. The default is \fB128K\fR.

.TP
\fB\-v\fR
Be verbose.

.TP
\fB\--io-threads=N\fR
Use N threads for I/O. This is used by the file hashing and dedupe
stages. Default is automatically detected based on number of host
cpus.

.TP
\fB\-?, --help\fR
Prints help text.

.TP
\fB\--lookup-extents=[yes|no]\fR
Defaults to no. While checksumming a file, duperemove can optionally
lookup file extent state to see whether a given file block is already
shared. This information can later be used to optimize the search for
duplicate extents. There are some caveats to this, so please read
below.

On btrfs, extents which have been snapshotted are reported as shared,
as more than one inode points to them. A deduped extent also gets
reported as shared for the same reasons. Internally duperemove can not
yet make the distinction between the two. If \fB--lookup-extents\fR is
turned on, duperemove will consider a shared extent to have already
been deduped. On a snapshotted file system this might cause all or
most of the extents to be skipped for dedupe.

If you are not making snapshots on the fs you are deduping, this
option will allow duperemove to make better decisions on which extents
to dedupe.

A future version of duperemove will remove this restriction, allowing
us to default this option to on.

.TP
\fB\--read-hashes=hashfile\fR
\fB\This option is primarily for testing.\fR See the \fB--hashfile\fR option if you want to use hashfiles.

Read hashes from a hashfile. A file list is not required with this
option. Dedupe can be done if duperemove is run from the same base
directory as is stored in the hash file (basically duperemove has to
be able to find the files).

.TP
\fB\--write-hashes=hashfile\fR
\fB\This option is primarily for testing.\fR See the \fB--hashfile\fR option if you want to use hashfiles.

Write hashes to a hashfile. These can be read in at a later date and
deduped from.

.TP
\fB\--debug\fR
Print debug messages, forces \fB-v\fR if selected.

.TP
\fB\--hash-threads=N\fR
Deprecated, see \fB--io-threads\fR above.

.TP
\fB\--hash=alg\fR
Supported alg: auto (default), sha256, xxhash, murmur3.

\fBxxhash\fR
64-bit fastest, weak on large data set.

\fBmurmur3\fR
128-bit fast.

\fBsha256\fR
256-bit the slowest.

\fBauto\fR
choice hash alg by expected block count.

.SH "FAQ"

Please see the \fBFAQ.md\fR file which should have been included with your duperemove package.

.SH "NOTES"
Deduplication is currently only supported by the \fIbtrfs\fR filesystem.

.SH "SEE ALSO"
.BR filesystems(5)
.BR btrfs(8)
.BR fdupes(1)
